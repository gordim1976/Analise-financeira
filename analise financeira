import tkinter as tk
import yfinance as yf
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPRegressor

def coletar_dados(ativo, data_inicio, data_fim):
    dados = yf.download(ativo, start=data_inicio, end=data_fim, progress=False)
    return dados

def treinar_modelo(dados):
    X = dados[['Open', 'High', 'Low', 'Close', 'Volume']]
    y = dados['Close']

    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    modelo = MLPRegressor(hidden_layer_sizes=(100, 100), max_iter=1000)
    modelo.fit(X_scaled, y)

    return modelo, scaler

def fazer_previsao(modelo, scaler, dados):
    X = dados[['Open', 'High', 'Low', 'Close', 'Volume']]
    X_scaled = scaler.transform(X)
    previsao = modelo.predict(X_scaled)
    return previsao

def iniciar_analises():
    ativo = ativo_entry.get()
    data_inicio = data_inicio_entry.get()
    data_fim = data_fim_entry.get()

    dados = coletar_dados(ativo, data_inicio, data_fim)
    modelo, scaler = treinar_modelo(dados)
    previsao = fazer_previsao(modelo, scaler, dados)

    resultado_label.config(text=f"Previsão Futura: {previsao}")

root = tk.Tk()
root.title("App de Análise Financeira")

titulo_label = tk.Label(root, text="Bem-vindo ao App de Análise Financeira", font=("Arial", 16))
titulo_label.pack(pady=20)

ativo_label = tk.Label(root, text="Digite o código do ativo:")
ativo_label.pack()
ativo_entry = tk.Entry(root)
ativo_entry.pack()

data_inicio_label = tk.Label(root, text="Digite a data de início (YYYY-MM-DD):")
data_inicio_label.pack()
data_inicio_entry = tk.Entry(root)
data_inicio_entry.pack()

data_fim_label = tk.Label(root, text="Digite a data de fim (YYYY-MM-DD):")
data_fim_label.pack()
data_fim_entry = tk.Entry(root)
data_fim_entry.pack()

botao_analise = tk.Button(root, text="Iniciar Análises Futuras", command=iniciar_analises)
botao_analise.pack()

resultado_label = tk.Label(root, text="", font=("Arial", 12))
resultado_label.pack(pady=20)

root.mainloop()

from machine_learning.rede_neural import Rede_Neural




# Criar uma instância da classe RedeNeural com o formato dos dados de entrada
rede = Rede_Neural(input_shape=(5,))


# Criar uma instância da classe Rede_Neural
rede_neural = Rede_Neural()

# Dados de treino e teste
X_treino = ...  # Dados de treino
y_treino = ...  # Valores alvo dos dados de treino
X_teste = ...   # Dados de teste

# Treinar a rede neural com os dados de treino
rede_neural.treinar(X_treino, y_treino)

# Fazer previsões com a rede neural utilizando os dados de teste
previsoes = rede_neural.fazer_previsao(X_teste)
